My notes for k8s coloarning with rwxrob

lesson 1

main difference between VM and container is that VM doesn't share the same operation system whereas containers do share the same base operative system, same kernel

Virtualization solves problems with sharing resources in different apps on the same physical server. in olden times some program can eat all resources and others wouldn't have enough

Also you need to allocate at least 1 core to a vm

Main virtualization engines: VMWare, leading Open Source one is VirtualBox
You can snapshot a vm, experiment and then get back where it was

Containers are ephemeral, you don't save stuff inside of em
They are considered lightweight bc they share the os among the applications

containers really are just applications on steroids
containers are just another package mechanism - and a way to run this as if it was it's own thing

in k8s u setting up criteria where you want it to run
it's through labels and annotations you communicate that to k8s

containerization is overlapping with package systems - Nyx, influences it
big companies publish a lot of containers
it should be compliant with OCI open container initiative
universal package distribution method, already testing

that is the center of devops movement
the future internet will be a bunch of containers, K8s multicluster
the modern worldwide network will be based on containers

iot people use k8s to manage how they put drivers on their devices

the coolest thing abt it: 
the cluster is running, all is packaged into pods, that are built of one or two images, those images are hosted on your own private registry. You make a change to one of your applications, you update the image and push it and it gets automatically redeployed to the entire cluster without any additional work. because of policies. you set up a policy saying: get a new image if there's a new one. always get the latest one. policy is declarative

You don't want to allow developers deploy without any checks because they will use a pile of resources, so there is this thing called *gateway policies* that you can set

This is why enerprizes are crazy abt k8s

to many cto-s it's the DevOps kumbaya moment

if somebody breaks you k8s will reschedule all work and auto heal
it allows you to find any app that go rogue and break a cluster or a node

the machines that hold the k8s nodes still have to be administered the old way  
there is a separate operation system on them
they have to have security patches and all that infra engineering techniques

hose up a node

the next wave cloud native will be is k8s in a graded op systems 
bc once the os is just another containerized app - 

AWS manages the k8s nodes by itself

landscape.cncf.io - the technical landscape of cloud native
talos-systems.com - os for k8s

pain points in security - real thing 
no shell or ssl access 

getting access to the nodes is a pain point in k8s

what happens if you break out of the kubernets runtime you can get access to the underlying node underneath it, in Talos there is nothing you can get access to
attack can be on the socket 

the filesystem on talos is read only

one of the pain points in security is the os has to be integrated with k8s

crio vs dockerd - you can have both on your node

hypervizor is a virtualization of physical devices
type 1 is bare hardware, type 2 is software

wsl 1 is a linux kernel emulation, not even a linux kernel

upsides of containers: CICD with quick and reliable rollbacks due to image immutability
- dev and ops separation of concerns: create app container images at build/release time rather than deployment time, decoupling apps from infrastructure
- observability: app health and other signals
- environmental consistency across dev, test and prod: runs the same on a laptop as it does in the cloud
creating development images rather than forcing some web interface
modern development practices - create a image that all your team uses 
- cloud and os portability - runs on different os and clouds
- app-centric development - raises level of abstraction from running an os on virtual hardware to running an app on an os using virtual resources
- loosely coupled, distributed elastic micro-services: apps are broken into smaller independent pieces and can be deployed and managed dynamically 
- resourse isolation - predictable app performance
- resource utilization - high efficiency and density

managing policies is very important for k8s security
OPA gatekeeper

learn Go and Helm charts

if you have an IT role you should ask yourself all the time - can it be hacked?
most of the hacks are tiny superficial things
shell check -? learn what it is

canary deployment - deploy on a small scale and see. if it dies pull it back

What k8s does? 
-service discovery and load balancing - can expose a container using the DNS name or using their own IP address. if traffic to it is high, it is able to load balance and distribute the network traffic so that the deployment is stable

-storage orchestration - allows you to automatically mount a storage system of your choice, such as local storages, public cloud providers etc
a container does not have storage in it. it's supposed to be taken online and brought back without hurting anything
you need to mount storage 
what is PVC 
local disk is not available by default to k8s

if you have a job that requires 10 cpus to work you have to have at least one machine, one node that has at least 10 cpus and that job is going to have to be scheduled and compete with any other jobs that have the same requirement on that same machine
this is why if I build a big cluster a big part of that cluster is going to be a 64 core system using like a thread ripper or some shit
bc I want at least one powerhouse multi-core system node in my local lab cluster 

PVC is k8s own way of managing storage, a persistent volume, you have to map claims

What are the options?
GPFS is network attached storage that get us in trouble bc elasticsearch cannot respond to the indexes, don't work over network

by default etcd doesn't store secret encrypted on disc, it stores them in base64

k8s doesn't come with a source code management system of any kind. you have to have one, usually github or gitlab



